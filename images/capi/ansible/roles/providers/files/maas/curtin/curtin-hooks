#!/usr/bin/env python3
#
# This original script was copied from:
# Source: https://github.com/canonical/packer-maas
# Original Author: Alexsander de Souza <alexsander.souza@canonical.com>
# and modified by the image-builder team


import os
import platform
import random
import shutil
import socket
import string
import sys

from curtin import distro, util
from curtin.commands import apt_config, curthooks
from curtin.config import load_command_config
from curtin.log import DEBUG, LOG, basicConfig
from curtin.paths import target_path
from curtin.util import ChrootableTarget, load_command_environment


def run_hook_in_target(target, hook):
    """Look for "hook" in "target" and run in a chroot"""
    target_hook = target_path(target, "/curtin/" + hook)
    if os.path.isfile(target_hook):
        LOG.debug("running %s" % target_hook)
        with ChrootableTarget(target=target) as in_chroot:
            in_chroot.subp(["/curtin/" + hook])
        return True
    return False


def curthook(cfg, target, state):
    """Configure network and bootloader"""
    LOG.info("Running curtin builtin curthooks")
    state_etcd = os.path.split(state["fstab"])[0]
    machine = platform.machine()

    distro_info = distro.get_distroinfo(target=target)
    if not distro_info:
        raise RuntimeError("Failed to determine target distro")
    osfamily = distro_info.family
    LOG.info(
        "Configuring target system for distro: %s osfamily: %s",
        distro_info.variant,
        osfamily,
    )

    sources = cfg.get("sources", {})
    dd_image = len(util.get_dd_images(sources)) > 0

    curthooks.disable_overlayroot(cfg, target)
    curthooks.disable_update_initramfs(cfg, target, machine)
    curthooks.install_missing_packages(cfg, target, osfamily=osfamily)

    if not dd_image:
        curthooks.configure_iscsi(cfg, state_etcd, target, osfamily=osfamily)
        curthooks.configure_mdadm(cfg, state_etcd, target, osfamily=osfamily)
        curthooks.copy_fstab(state.get("fstab"), target)
        curthooks.add_swap(cfg, target, state.get("fstab"))

    run_hook_in_target(target, "install-custom-packages")

    if not dd_image:
        curthooks.setup_kernel_img_conf(target)

        crypttab_location = os.path.join(os.path.split(state["fstab"])[0], "crypttab")
        if os.path.exists(crypttab_location):
            curthooks.copy_crypttab(crypttab_location, target)

        udev_rules_d = os.path.join(state["scratch"], "rules.d")
        if os.path.isdir(udev_rules_d):
            curthooks.copy_dname_rules(udev_rules_d, target)

    apt_config.apply_debconf_selections(cfg, target)

    curthooks.apply_networking(target, state)
    curthooks.handle_pollinate_user_agent(cfg, target)

    # re-enable update_initramfs
    curthooks.enable_update_initramfs(cfg, target, machine)
    curthooks.update_initramfs(target, all_kernels=True)

    run_hook_in_target(target, "setup-bootloader")
    generate_unique_iscsi_initiator_name(target)


def generate_random_id(length):
    return ''.join(random.choices(string.hexdigits.lower(), k=length))


def generate_unique_iscsi_initiator_name(target):
    """Generate a unique iSCSI initiator name for the target."""
    base_iqn_name = "iqn.2004-10.com.ubuntu"
    random_id = generate_random_id(4)
    initiator_name = f"{base_iqn_name}:{random_id}:{socket.gethostname()}"
    header = "## This file is automatically generated by curtin ##\n"
    LOG.info("Generated unique iSCSI initiator name: %s", initiator_name)

    if not os.path.exists(target + "/etc/iscsi"):
        LOG.warning("Target directory " + target + "/etc/iscsi does not exist."
                                                   "Skiping iSCSI initiator name generation.")
        return

    if not os.path.exists(target + "/etc/iscsi/initiatorname.iscsi"):
        LOG.warning("Target file " + target + "/etc/iscsi/initiatorname.iscsi does not exist."
                                              "Skiping iSCSI initiator name generation.")
        return

    # why 127 characters? https://kb.netapp.com/on-prem/ontap/da/SAN/SAN-KBs/What_is_the_maximum_length_of_a_iSCSI_iqn_name
    if len(initiator_name) > 127:
        LOG.error("iSCSI initiator name exceeds 127 characters: " + initiator_name)
        raise ValueError("iSCSI initiator name exceeds 127 characters")

    try:
        with open(target + "/etc/iscsi/initiatorname.iscsi", "w") as f:
            f.write(header + "InitiatorName=%s\n" % initiator_name)
        LOG.info("Wrote initiator name to " + target + "/etc/iscsi/initiatorname.iscsi")
    except IOError as e:
        LOG.error("Failed to write iSCSI initiator name: %s", e)
        raise RuntimeError("Failed to write iSCSI initiator name") from e


def cleanup():
    """Remove curtin-hooks so its as if we were never here."""
    curtin_dir = os.path.dirname(__file__)
    shutil.rmtree(curtin_dir)


def main():
    state = load_command_environment()
    config = load_command_config(None, state)
    target = state["target"]

    basicConfig(stream=sys.stderr, verbosity=DEBUG)

    curthook(config, target, state)
    cleanup()


if __name__ == "__main__":
    main()
